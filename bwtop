#!/usr/bin/env python3
__author__ = 'Mahmoud Adel <mahmoud.adel2@gmail.com>'
__version__ = 0.1
__status__ = "Development"

'''
CLI tool to monitor network traffic rate
'''

import argparse
import time
import curses
import os

#Setting cmd arguments
parser = argparse.ArgumentParser(prog='check_networktraffic')
parser.add_argument('-i', '--interface', required=False)
parser.add_argument('-t', '--timeout',  type=int, required=False)
args = vars(parser.parse_args())

#Checking arguments
if args['interface'] == None:
    nic = ':'
else:
    nic = args['interface']

if args['timeout'] != None and args['timeout'] > 0:
    hastimeout = True
    timeout = args['timeout']
else:
    hastimeout = False
    timeout = 1

#Setting functions
def sleep(sec):
    try:
        time.sleep(sec)
    except KeyboardInterrupt:
        curses.endwin()
        exit(0)

def getTraf(iface):
    rawstatus = list()
    destatus = dict()
    counter = 0
    matchediface = 0
    with open('/proc/net/dev') as f:
        for i in f:
            if iface in i:
                matchediface = matchediface + 1
                rawstatus.append(i.split())
                rcv = float(rawstatus[0][1])
                sent = float(rawstatus[0][9])
                counter = counter + rcv + sent
                destatus[rawstatus[0][0]] = {'rcv': rcv, 'sent': sent, 'total': rcv + sent}
                rawstatus = list()
    if matchediface == 0:
        curses.endwin()
        print('-i value should be "all" or a valid network interface')
        exit(2)
    statistics = [counter / 1024, destatus]
    return statistics

def main():
    stdscr = curses.initscr()
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_MAGENTA, -1)
    curses.init_pair(2, curses.COLOR_BLUE, -1)
    curses.init_pair(3, curses.COLOR_GREEN, -1)
    curses.init_pair(4, curses.COLOR_YELLOW, -1)
    xdefault = 3
    x = xdefault
    while True:
        total ,data = getTraf(nic)
        sleep(1)
        newtotal ,newdata = getTraf(nic)
        stdscr.clear()
        stdscr.border(0)
        stdscr.addstr(1, 1, 'BWTop on: {0}     Time: {1}       Refresh every: {2}s'.format(tuple(os.uname())[1], time.strftime("%H:%M:%S", time.gmtime()), timeout), curses.A_BOLD)
        for key in data.keys():
            stdscr.addstr(x, 1, '{0}'.format(key), curses.color_pair(1))
            stdscr.addstr(x, 20, 'Sent:', curses.color_pair(2))
            stdscr.addstr(x, 26, '{0} KB'.format("%.2f" % ((newdata[key]['sent'] - data[key]['sent']) / 1024)), curses.color_pair(3))
            stdscr.addstr(x, 50, 'Received:', curses.color_pair(2))
            stdscr.addstr(x, 60, '{0} KB'.format("%.2f" % ((newdata[key]['rcv'] - data[key]['rcv']) / 1024)), curses.color_pair(3))
            stdscr.refresh()
            x = x + 1
        traf = newtotal - total
        stdscr.addstr(x + 1, 1, 'Total:', curses.color_pair(4))
        stdscr.addstr(x + 1, 8, '{} KB/s'.format("%.2f" % traf), curses.color_pair(3))
        stdscr.refresh()
        x = xdefault
        if hastimeout:
            sleep(timeout - 1)

if __name__ == '__main__': main()