#!/usr/bin/env python3
__author__ = 'Mahmoud Adel <mahmoud.adel2@gmail.com>'
__version__ = 0.1
__status__ = "Development"

'''
CLI tool to monitor network traffic rate
'''

import argparse
import time
import curses
from curses import wrapper

#Setting cmd arguments
parser = argparse.ArgumentParser(prog='check_networktraffic')
parser.add_argument('-i', help='{all | <Interface>}', required=True)
args = vars(parser.parse_args())

#Checking arguments
if args['i'] == 'all':
    nic = ':'
else:
    nic = args['i']

#Setting functions
def getTraf(iface):
    rawstatus = list()
    destatus = dict()
    counter = 0
    matchediface = 0
    with open('/proc/net/dev') as f:
        for i in f:
            if iface in i:
                matchediface = matchediface + 1
                rawstatus.append(i.split())
                rcv = float(rawstatus[0][1])
                sent = float(rawstatus[0][9])
                counter = counter + rcv + sent
                destatus[rawstatus[0][0]] = {'rcv': rcv, 'sent': sent, 'total': rcv + sent}
                rawstatus = list()
    if matchediface == 0:
        curses.endwin()
        print('-i value should be "all" or a valid network interface')
        exit(2)
    statistics = [counter / 1024, destatus]
    return statistics

def main():
    stdscr = curses.initscr()
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_MAGENTA, -1)
    curses.init_pair(2, curses.COLOR_BLUE, -1)
    curses.init_pair(3, curses.COLOR_GREEN, -1)
    curses.init_pair(4, curses.COLOR_YELLOW, -1)
    x = 1
    while True:
        total ,data = getTraf(nic)
        try:
            time.sleep(1)
        except KeyboardInterrupt:
            curses.endwin()
            exit(0)
        newtotal ,newdata = getTraf(nic)
        stdscr.clear()
        stdscr.border(0)
        for key in data.keys():
            stdscr.addstr(x, 1, '{0}'.format(key), curses.color_pair(1))
            stdscr.addstr(x, 20, 'Sent:', curses.color_pair(2))
            stdscr.addstr(x, 26, '{0} KB'.format("%.2f" % ((newdata[key]['sent'] - data[key]['sent']) / 1024)), curses.color_pair(3))
            stdscr.addstr(x, 50, 'Received:', curses.color_pair(2))
            stdscr.addstr(x, 60, '{0} KB'.format("%.2f" % ((newdata[key]['rcv'] - data[key]['rcv']) / 1024)), curses.color_pair(3))
            stdscr.refresh()
            x = x + 1
        traf = newtotal - total
        stdscr.addstr(x, 1, 'Total:', curses.color_pair(4))
        stdscr.addstr(x, 8, '{} KB/s'.format("%.2f" % traf), curses.color_pair(3))
        stdscr.refresh()
        x = 1

if __name__ == '__main__': main()